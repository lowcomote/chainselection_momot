model Ecore1 driver EMF {
nsuri = "http://www.eclipse.org/emf/2002/Ecore1"
};

model JavaSource2 driver EMF {
nsuri = "http://www.eclipse.org/gmt/2005/JavaSource2"
};

pre {"EMF2Java Transformation starts".println(); }


rule Package
	transform s:Ecore1!EPackage
	to t: JavaSource2!JavaSource {
		t.classes = s.eClassifiers.equivalent();
	}


rule Eclass
	transform s: Ecore1!EClass
	to t: JavaSource2!ClassDeclaration{
	t.name = s.name;
	//for(st in s.eSuperTypes){t.superclass ::= st;}
	//if(s.eSuperTypes.size()>0)	
	t.superclass = s.eSuperTypes.first().equivalent();
	}

rule Attr2Methods
	transform s:Ecore1!EAttribute
	to t1:JavaSource2!MethodDefinition, t2:JavaSource2!MethodDefinition, p: JavaSource2!Property{
	t1.class = s.eContainingClass.equivalent();
	t1.name = 'set'+s.name.firstToUpperCase();
	t2.class = s.eContainingClass.equivalent();
	t2.name = 'get'+s.name.firstToUpperCase();
	//p.name = s.name;
	//p.owner = s.eContainingClass.equivalent();//delete
	}


rule Ref2Methods
	transform s:Ecore1!EReference
	to t1:JavaSource2!MethodDefinition, t2:JavaSource2!MethodDefinition, p: JavaSource2!Property {
	t1.class = s.eContainingClass.equivalent();
	t1.name = 'set'+s.name.firstToUpperCase();
	//t2.class = s.eContainingClass.equivalent();
	//t2.name = 'get'+s.name.firstToUpperCase();
	p.name = s.name;
	p.owner = s.eContainingClass.equivalent();//delete
	}

post {"EMF2Java Transformation ends".println(); }