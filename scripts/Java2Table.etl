model JavaSource driver EMF {
nsuri = "http://www.eclipse.org/gmt/2005/JavaSource"
};

model Table driver EMF {
nsuri = "http://www.eclipse.org/gmt/2005/Table"
};

pre { "Java2Table Transformation starts". println();}

operation JavaSource!MethodDefinition allMethodDefs(): Sequence {
	return JavaSource!MethodDefinition.allInstances().sortBy(e | e.class.name + '_' + e.name);
}
	
operation JavaSource!MethodDefinition
	computeContent(col : JavaSource!MethodDefinition) : String {
	return self.invocations.select(i | i.method.name = col.name
					and i.method.class.name = col.class.name).size();
	}
		
rule Main
	transform
		s : JavaSource!JavaSource
		
	to
		// Table is composed of the first row + data rows
		t : Table!Table, first_row : Table!Row, first_col : Table!Cell {
			t.rows := Sequence{first_row, thisModule.allMethodDefs.collect(e | this.resolveTemp(e, 'row'))};
			// First row is composed of the first column + title columns

			first_row.cells := Sequence{first_col, this.allMethodDefs.collect(md | thisModule.TitleCols(md))}.flatten();
		
		//First column empty
			first_col.content = '';
}

rule TitleCols 
	transform
		md: JavaSource!MethodDefinition
	to
		tFilled: Table!Cell {
			tFilled.content = md.class.name + '.' + md.name;
}

// Rule 'MethodDefinition'
// This rule generates the content of the table, including the first cell of
// each row, which identifies a method (format 'class_name.method_name').
rule MethodDefinition 
	transform
		m : JavaSource!MethodDefinition

	to
		// Rows are composed of the first (title) cell + data cells
		row : Table!Row, title_cel : Table!Cell {
			row.cells := Sequence{title_cel, thisModule.allMethodDefs.
				collect(md | this.DataCells(md, m))}.flatten();
		title_cel.content = m.class.name + '.' + m.name;		
}

rule DataCells 
	transform
		md: JavaSource!MethodDefinition
	to
		cell: Table!Cell {
			content <- md.computeContent(md).toString();
}

	